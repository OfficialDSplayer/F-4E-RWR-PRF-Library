name: Sync WAV Files and Groups

on:
  workflow_dispatch: # Manual trigger

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout target repo (F-4E-RWR-PRF-Library)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup Git credentials for cloning source
        run: |
          git config --global url."https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Clone source repo (DCS-Datamine-Raw-Files)
        run: |
          git clone --depth=1 https://github.com/OfficialDSplayer/DCS-Datamine-Raw-Files.git source-repo

      - name: Copy .wav files
        run: |
          rm -rf imported_wavs
          mkdir -p imported_wavs
          cp source-repo/Mods/aircraft/F-4E/Sounds/Effects/Aircrafts/RHAW/radars/*.wav imported_wavs/

      # - name: Copy rwr.lua and radars.lua files
      #   run: |
      #     rm -rf imported_luas
      #     mkdir -p imported_luas
      #     cp source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/rwr.lua imported_luas/
      #     cp source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/radars.lua imported_luas/

      - name: Clean up source repo
        run: rm -rf source-repo

      - name: Generate wav_list.json
        run: |
          echo "[" > wav_list.json
          find imported_wavs -name "*.wav" | sort | sed 's/^/"/;s/$/",/' >> wav_list.json
          sed -i '$ s/,$//' wav_list.json
          echo "]" >> wav_list.json

      - name: Generate or Update groups.json
        run: |
          if [ ! -f groups.json ]; then
            echo "{}" > groups.json
          fi

          python3 -c "
          import json
          from pathlib import Path

          with open('wav_list.json') as f:
              wav_files = json.load(f)

          groups_path = Path('groups.json')
          groups = {}
          if groups_path.exists():
              with groups_path.open() as f:
                  groups = json.load(f)

          updated = False
          for wav in wav_files:
            if wav not in groups:
                groups[wav] = {
                    'group': 'Ungrouped',
                    'name': Path(wav).stem,
                    'description': 'Add a description here',
                    'hidden': False
                }
                updated = True
            else:
                # Fill missing fields
                if 'description' not in groups[wav]:
                    groups[wav]['description'] = 'Add a description here'
                    updated = True
                if 'hidden' not in groups[wav]:
                    groups[wav]['hidden'] = False
                    updated = True

          if updated:
              with groups_path.open('w') as f:
                  json.dump(groups, f, indent=2)
          "

      - name: Commit and Push Changes
        run: |
          # Load latest commit message (optional fallback message if needed)
          COMMIT_MESSAGE="Update imported WAVs and groups.json"

          # Get current UTC timestamp
          COMMIT_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          FINAL_COMMIT_MSG="$COMMIT_MESSAGE (Synced on $COMMIT_TIMESTAMP)"

          echo "Final commit message: $FINAL_COMMIT_MSG"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add imported_wavs imported_luas wav_list.json groups.json

          if git diff --cached --quiet; then
            echo "⚠️ No changes detected, skipping commit."
          else
            git commit -m "$FINAL_COMMIT_MSG"
            git push
          fi
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
