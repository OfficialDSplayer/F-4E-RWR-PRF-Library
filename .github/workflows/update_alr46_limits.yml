name: Update ALR-46 Limits JSON

on:
  push:
    paths:
      - "imported_luas/rwr.lua"
      - "imported_luas/radars.lua"
      - "wav_list.json"
      - ".github/workflows/update_alr46_limits.yml"
  workflow_dispatch:

jobs:
  generate-alr46-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Clone external source repo (DCS-Datamine-Raw-Files)
        run: |
          git clone --depth=1 https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/OfficialDSplayer/DCS-Datamine-Raw-Files.git source-repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate or update alr46_limits.json
        run: |
          python3 <<EOF
          import re, json
          from pathlib import Path

          # Officially verified limits
          BAND_MIN = 2
          BAND_MAX = 20.0

          rwr = Path("source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/rwr.lua").read_text(encoding="utf-8")
          radars = Path("source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/radars.lua").read_text(encoding="utf-8")
          wav_list = json.loads(Path("wav_list.json").read_text(encoding="utf-8"))

          # Step 1: Parse radar.lua entries by DisplayName
          named_style = re.findall(r'([A-Za-z0-9_/-]+)\s*=\s*{[^}]*?DisplayName\s*=\s*"([^"]+)",(.*?)}', radars, flags=re.DOTALL)
          indexed_style = re.findall(r'\["([^"]+)"\]\s*=\s*{[^}]*?DisplayName\s*=\s*"([^"]+)",(.*?)}', radars, flags=re.DOTALL)

          radars_dict = {}
          for (_, display, body) in named_style + indexed_style:
              key = display.replace("/", "_")
              band = re.search(r'band\s*=\s*([\d.]+)', body)
              prf_search = re.search(r'prf_search\s*=\s*([\d.]+)', body)
              prf_track = re.search(r'prf_track\s*=\s*([\d.]+)', body)
              cd_guidance = 'has_cd_command_guidance' in body

              radars_dict[key] = {
                  "band": float(band.group(1)) if band else None,
                  "prf_search": float(prf_search.group(1)) if prf_search else None,
                  "prf_track": float(prf_track.group(1)) if prf_track else None,
                  "has_cd_command_guidance": cd_guidance
              }

          # Step 2: Start base dictionary
          radar_data = radars_dict.copy()

          # Step 2.5: First round of OverrideRadar
          override_entries_1 = re.findall(r'OverrideRadar\("([^"]+)",\s*{(.*?)}\)', rwr, flags=re.DOTALL)
          for name, body in override_entries_1:
              key = name.replace("/", "_")
              radar_data.setdefault(key, {})
              if m := re.search(r'band\s*=\s*([\d.]+)', body): radar_data[key]['band'] = float(m.group(1))
              if m := re.search(r'prf_search\s*=\s*([\d.]+)', body): radar_data[key]['prf_search'] = float(m.group(1))
              if m := re.search(r'prf_track\s*=\s*([\d.]+)', body): radar_data[key]['prf_track'] = float(m.group(1))
              if 'has_cd_command_guidance' in body: radar_data[key]['has_cd_command_guidance'] = True

          # Step 3: CreateRadar or CreateFrqScanRadar
          create_entries = re.findall(r'(?:CreateRadar|CreateFrqScanRadar)\("([^"]+)",\s*{(.*?)}\)', rwr, flags=re.DOTALL)
          for name, body in create_entries:
              key = name.replace("/", "_")
              radar_data.setdefault(key, {})
              if m := re.search(r'band\s*=\s*([\d.]+)', body): radar_data[key]['band'] = float(m.group(1))
              if m := re.search(r'prf_search\s*=\s*([\d.]+)', body): radar_data[key]['prf_search'] = float(m.group(1))
              if m := re.search(r'prf_track\s*=\s*([\d.]+)', body): radar_data[key]['prf_track'] = float(m.group(1))
              if 'has_cd_command_guidance' in body: radar_data[key]['has_cd_command_guidance'] = True

          # Step 3.5: OverrideRadar again (applies to newly created radars)
          override_entries_2 = re.findall(r'OverrideRadar\("([^"]+)",\s*{(.*?)}\)', rwr, flags=re.DOTALL)
          for name, body in override_entries_2:
              key = name.replace("/", "_")
              radar_data.setdefault(key, {})
              if m := re.search(r'band\s*=\s*([\d.]+)', body): radar_data[key]['band'] = float(m.group(1))
              if m := re.search(r'prf_search\s*=\s*([\d.]+)', body): radar_data[key]['prf_search'] = float(m.group(1))
              if m := re.search(r'prf_track\s*=\s*([\d.]+)', body): radar_data[key]['prf_track'] = float(m.group(1))
              if 'has_cd_command_guidance' in body: radar_data[key]['has_cd_command_guidance'] = True

          # Step 4: Inheritance from CreateRadarFromBase
          base_links = re.findall(r'CreateRadarFromBase\("([^"]+)",\s*"([^"]+)"\)', rwr)
          for new, base in base_links:
              new_key = new.replace("/", "_")
              base_key = base.replace("/", "_")
              if base_key in radar_data:
                  radar_data[new_key] = radar_data[base_key].copy()

          # Step 5: Final override pass
          override_entries_3 = re.findall(r'OverrideRadar\("([^"]+)",\s*{(.*?)}\)', rwr, flags=re.DOTALL)
          for name, body in override_entries_3:
              key = name.replace("/", "_")
              radar_data.setdefault(key, {})
              if m := re.search(r'band\s*=\s*([\d.]+)', body): radar_data[key]['band'] = float(m.group(1))
              if m := re.search(r'prf_search\s*=\s*([\d.]+)', body): radar_data[key]['prf_search'] = float(m.group(1))
              if m := re.search(r'prf_track\s*=\s*([\d.]+)', body): radar_data[key]['prf_track'] = float(m.group(1))
              if 'has_cd_command_guidance' in body: radar_data[key]['has_cd_command_guidance'] = True

          # Step 6: Match to .wav list
          limits = {}
          missing = []

          for wav in wav_list:
              filename = Path(wav).stem  # e.g., "AN_APG_70_TRACK"
              base_name = re.sub(r"_(SEARCH|TRACK)$", "", filename)
              base_name = base_name.replace("/", "_")

              data = radar_data.get(base_name, {})
              band = data.get("band")
              undetectable = band is None or band < BAND_MIN or band > BAND_MAX

              limits[wav] = {
                  "band": band,
                  "prf_search": data.get("prf_search"),
                  "prf_track": data.get("prf_track"),
                  "has_cd_command_guidance": data.get("has_cd_command_guidance", False),
                  "undetectable": undetectable,
              }

              if band is None:
                  missing.append(base_name)

          if missing:
              print(f"⚠️ {len(set(missing))} radars not found in band data:")
              print(", ".join(sorted(set(missing))[:15]) + ("..." if len(set(missing)) > 15 else ""))

          Path("alr46_limits.json").write_text(json.dumps(limits, indent=2), encoding="utf-8")
          print("✅ alr46_limits.json generated.")
          EOF

      - name: Clean up source repo
        run: rm -rf source-repo

      - name: Commit and push changes
        run: |
          # Give a timestamped commit message
          COMMIT_MESSAGE="Auto-generate or update alr46_limits.json"
          COMMIT_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          FINAL_COMMIT_MSG="$COMMIT_MESSAGE (Synced on $COMMIT_TIMESTAMP)"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add alr46_limits.json

          if git diff --cached --quiet; then
            echo "⚠️ No changes detected, skipping commit."
          else
            git commit -m "$FINAL_COMMIT_MSG"
            git push
          fi
