name: Update ALR-46 Limits JSON

on:
  push:
    paths:
      - "imported_luas/rwr.lua"
      - "imported_luas/radars.lua"
      - "wav_list.json"
      - ".github/workflows/update_alr46_limits.yml"
  workflow_dispatch:

jobs:
  generate-alr46-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Clone external source repo (DCS-Datamine-Raw-Files)
        run: |
          git clone --depth=1 https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/OfficialDSplayer/DCS-Datamine-Raw-Files.git source-repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate or update alr46_limits.json
        run: |
          python3 <<EOF
          import re, json
          from pathlib import Path

          BAND_MIN = 1.5
          BAND_MAX = 20.0

          rwr = Path("source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/rwr.lua").read_text(encoding="utf-8")
          radars = Path("source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/radars.lua").read_text(encoding="utf-8")
          wav_list = json.loads(Path("wav_list.json").read_text(encoding="utf-8"))

          # Step 1: Parse radars.lua using DisplayName and band
          named_style = re.findall(r'([A-Za-z0-9_/-]+)\s*=\s*{[^}]*?DisplayName\s*=\s*"([^"]+)",[^}]*?band\s*=\s*([\d.]+)', radars)
          indexed_style = re.findall(r'\["([^"]+)"\]\s*=\s*{[^}]*?DisplayName\s*=\s*"([^"]+)",[^}]*?band\s*=\s*([\d.]+)', radars)
          radars_dict = {display.replace("/", "_"): float(band) for (_, display, band) in named_style + indexed_style}

          # Step 2: Start with radar.lua entries
          radar_band_data = radars_dict.copy()

          # Step 3: Add CreateRadar / CreateFrqScanRadar entries from rwr.lua
          create_entries = re.findall(r'(?:CreateRadar|CreateFrqScanRadar)\("([^"]+)",\s*{[^}]*band\s*=\s*([\d.]+)', rwr)
          for name, band in create_entries:
              radar_band_data[name.replace("/", "_")] = float(band)

          # Step 4: Handle CreateRadarFromBase(name, base) → inherit band
          base_links = re.findall(r'CreateRadarFromBase\("([^"]+)",\s*"([^"]+)"\)', rwr)
          for new, base in base_links:
              new = new.replace("/", "_")
              base = base.replace("/", "_")
              if base in radar_band_data and new not in radar_band_data:
                  radar_band_data[new] = radar_band_data[base]

          # Step 5: OverrideRadar(name, {...}) → overwrite band
          override_entries = re.findall(r'OverrideRadar\("([^"]+)",\s*{[^}]*band\s*=\s*([\d.]+)', rwr)
          for name, band in override_entries:
              radar_band_data[name.replace("/", "_")] = float(band)

          # Step 6: Match wav files to radar names and calculate detectability
          limits = {}
          missing = []

          for wav in wav_list:
              filename = Path(wav).stem
              base_name = re.sub(r"_(SEARCH|TRACK)$", "", filename)
              base_name = base_name.replace("/", "_")

              band = radar_band_data.get(base_name)
              if band is None:
                  undetectable = True
                  missing.append(base_name)
              else:
                  undetectable = band < BAND_MIN or band > BAND_MAX

              limits[wav] = {
                  "band": band,
                  "undetectable": undetectable
              }

          if missing:
              print(f"⚠️ {len(set(missing))} radars not found in band data:")
              print(", ".join(sorted(set(missing))[:10]))

          Path("alr46_limits.json").write_text(json.dumps(limits, indent=2), encoding="utf-8")
          print("✅ alr46_limits.json generated.")
          EOF

      - name: Clean up source repo
        run: rm -rf source-repo

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add alr46_limits.json

          if git diff --cached --quiet; then
            echo "⚠️ No changes detected, skipping commit."
          else
            git commit -m "Auto-generate or update alr46_limits.json"
            git push
          fi
