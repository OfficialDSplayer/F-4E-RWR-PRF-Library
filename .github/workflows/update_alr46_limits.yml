name: Update ALR-46 Limits JSON

on:
  push:
    paths:
      - "imported_luas/rwr.lua"
      - "imported_luas/radars.lua"
      - "wav_list.json"
      - ".github/workflows/update_alr46_limits.yml"
  workflow_dispatch:

jobs:
  generate-alr46-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate or update alr46_limits.json
        run: |
          python3 <<EOF
          import re, json
          from pathlib import Path

          BAND_MIN = 1.5  # Guess based on what's listed and tested
          BAND_MAX = 100.0  # Placeholder

          rwr = Path("imported_luas/rwr.lua").read_text(encoding="utf-8")
          radars = Path("imported_luas/radars.lua").read_text(encoding="utf-8")
          wav_list = json.loads(Path("wav_list.json").read_text(encoding="utf-8"))

          # Step 1: Parse radars.lua using DisplayName and band
          named_style = re.findall(r'([A-Za-z0-9_/-]+)\\s*=\\s*{[^}]*?DisplayName\\s*=\\s*"([^"]+)",[^}]*?band\\s*=\\s*([\\d.]+)', radars)
          indexed_style = re.findall(r'\["([^"]+)"\\]\\s*=\\s*{[^}]*?DisplayName\\s*=\\s*"([^"]+)",[^}]*?band\\s*=\\s*([\\d.]+)', radars)
          radars_dict = {display.replace("/", "_"): float(band) for (_, display, band) in named_style + indexed_style}

          # Step 2: Parse CreateRadar and OverrideRadar from rwr.lua (these override)
          rwr_direct = re.findall(r'(?:CreateRadar|OverrideRadar)\\("([^"]+)",\\s*{[^}]*band\\s*=\\s*([\\d.]+)', rwr)
          rwr_dict = {k.replace("/", "_"): float(v) for k, v in rwr_direct}

          # Step 3: Merge radar band map with rwr overrides taking priority
          radar_band_data = radars_dict.copy()
          radar_band_data.update(rwr_dict)  # ✅ rwr overrides radar.lua

          # Step 4: Handle CreateRadarFromBase(new, base)
          base_links = re.findall(r'CreateRadarFromBase\\("([^"]+)",\\s*"([^"]+)"\\)', rwr)
          base_links = [(new.replace("/", "_"), base.replace("/", "_")) for new, base in base_links]
          for new, base in base_links:
              if base in radar_band_data and new not in radar_band_data:
                  radar_band_data[new] = radar_band_data[base]

          # Step 5: Create detectability list from .wav names
          limits = {}
          missing = []

          for wav in wav_list:
              filename = Path(wav).stem
              base_name = re.sub(r"_(SEARCH|TRACK)$", "", filename)

              band = radar_band_data.get(base_name)
              if band is None:
                  undetectable = True
                  missing.append(base_name)
              else:
                  undetectable = band < BAND_MIN or band > BAND_MAX

              limits[wav] = {
                  "undetectable": undetectable
              }

          if missing:
              print(f"⚠️ {len(set(missing))} radars not found in band data:")
              print(", ".join(sorted(set(missing))[:10]))

          Path("alr46_limits.json").write_text(json.dumps(limits, indent=2), encoding="utf-8")
          print("✅ alr46_limits.json generated.")
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add alr46_limits.json

          if git diff --cached --quiet; then
            echo "⚠️ No changes detected, skipping commit."
          else
            git commit -m "Auto-generate or update alr46_limits.json"
            git push
          fi
