name: Update ALR-46 Limits JSON

on:
  push:
    paths:
      - "imported_luas/rwr.lua"
      - "imported_luas/radars.lua"
      - "wav_list.json"
      - ".github/workflows/update_alr46_limits.yml"
  workflow_dispatch:

jobs:
  generate-alr46-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate or Update alr46_limits.json
        run: |
          python3 <<EOF
          import re, json
          from pathlib import Path

          BAND_MIN = 1.5
          BAND_MAX = 20.0

          rwr_path = Path("imported_luas/rwr.lua")
          radars_path = Path("imported_luas/radars.lua")
          wav_list_path = Path("wav_list.json")
          output_path = Path("alr46_limits.json")

          if not rwr_path.exists() or not radars_path.exists() or not wav_list_path.exists():
              print("❌ Required file missing.")
              exit(1)

          rwr_data = rwr_path.read_text(encoding="utf-8")
          radars_data = radars_path.read_text(encoding="utf-8")
          wav_list = json.loads(wav_list_path.read_text(encoding="utf-8"))

          # Extract band values from radars.lua
          base_radars = dict(re.findall(r'\["([^"]+)"\]\s*=\s*{[^}]*band\s*=\s*([\d.]+)', radars_data))
          base_radars = {k: float(v) for k, v in base_radars.items()}

          # Extract and override with rwr.lua CreateRadar and OverrideRadar
          radar_defs = dict(re.findall(r'(?:CreateRadar|OverrideRadar)\("([^"]+)",\s*{[^}]*band\s*=\s*([\d.]+)', rwr_data))
          radar_defs = {k: float(v) for k, v in radar_defs.items()}

          # Override base values with rwr.lua values
          all_radars = base_radars.copy()
          all_radars.update(radar_defs)

          # Create lookup: name.replace("/", "_") → band
          normalized_bands = {
              k.replace("/", "_"): v for k, v in all_radars.items()
          }

          # Generate final mapping to wav names
          limits = {}
          for wav in wav_list:
              name = Path(wav).stem  # includes _SEARCH, _TRACK
              radar_name = name  # keep as-is
              band = normalized_bands.get(radar_name)
              limits[wav] = {
                  "undetectable": band is None or band < BAND_MIN or band > BAND_MAX
              }

          new_json = json.dumps(limits, indent=2)
          if not output_path.exists() or output_path.read_text(encoding="utf-8") != new_json:
              output_path.write_text(new_json, encoding="utf-8")
              print("✅ alr46_limits.json updated.")
          else:
              print("⚠️ No changes to alr46_limits.json.")
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add alr46_limits.json

          if git diff --cached --quiet; then
            echo "⚠️ No changes detected, skipping commit."
          else
            git commit -m "Auto-generate or update alr46_limits.json"
            git push
          fi
