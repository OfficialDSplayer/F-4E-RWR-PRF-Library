name: Update ALR-46 Limits JSON

on:
  push:
    paths:
      - "imported_luas/rwr.lua"
      - "imported_luas/radars.lua"
      - "wav_list.json"
      - ".github/workflows/update_alr46_limits.yml"
  workflow_dispatch:

jobs:
  generate-alr46-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Clone external source repo (DCS-Datamine-Raw-Files)
        run: |
          git clone --depth=1 https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/OfficialDSplayer/DCS-Datamine-Raw-Files.git source-repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate or update alr46_limits.json
        run: |
          python3 <<EOF
          import re, json
          from pathlib import Path

          # Verified band limits
          BAND_MIN = 2
          BAND_MAX = 20.0

          rwr = Path("source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/rwr.lua").read_text(encoding="utf-8")
          radars = Path("source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/radars.lua").read_text(encoding="utf-8")
          wav_list = json.loads(Path("wav_list.json").read_text(encoding="utf-8"))

          def norm(name):
              return name.replace("/", "_")

          # Parse symbolic constants like CW_PRF = 20000
          constants = dict(re.findall(r'(\w+)\s*=\s*([\d.]+)', rwr))

          def extract_prf(field, body):
              if m := re.search(rf'{field}\s*=\s*(\w+)', body):
                  val = m.group(1)
                  return float(val) if re.match(r'^\d+(\.\d+)?$', val) else float(constants.get(val, 'nan'))
              return None

          # Step 1: Parse radars.lua
          named_style = re.findall(r'([A-Za-z0-9_/-]+)\s*=\s*{[^}]*?DisplayName\s*=\s*"([^"]+)",(.*?)}', radars, re.DOTALL)
          indexed_style = re.findall(r'\["([^"]+)"\]\s*=\s*{[^}]*?DisplayName\s*=\s*"([^"]+)",(.*?)}', radars, re.DOTALL)

          radars_dict = {}
          for _, display, body in named_style + indexed_style:
              key = norm(display)
              entry = {}
              if (m := re.search(r'band\s*=\s*([\d.]+)', body)):
                  entry["band"] = float(m.group(1))
              if (v := extract_prf("prf_search", body)) is not None:
                  entry["prf_search"] = v
              if (v := extract_prf("prf_track", body)) is not None:
                  entry["prf_track"] = v
              if "has_cd_command_guidance" in body:
                  entry["has_cd_command_guidance"] = True
              radars_dict[key] = entry

          # Step 2: Start with radar.lua entries
          radar_data = radars_dict.copy()

          # Step 2.5: OverrideRadar BEFORE base linking
          override_entries = re.findall(r'OverrideRadar\("([^"]+)",\s*{(.*?)}\)', rwr, re.DOTALL)
          for name, body in override_entries:
              key = norm(name)
              radar_data.setdefault(key, {})
              if (m := re.search(r'band\s*=\s*([\d.]+)', body)):
                  radar_data[key]["band"] = float(m.group(1))
              if (v := extract_prf("prf_search", body)) is not None:
                  radar_data[key]["prf_search"] = v
              if (v := extract_prf("prf_track", body)) is not None:
                  radar_data[key]["prf_track"] = v
              if "has_cd_command_guidance" in body:
                  radar_data[key]["has_cd_command_guidance"] = True

          # Step 3: CreateRadar / CreateFrqScanRadar
          create_entries = re.findall(r'(?:CreateRadar|CreateFrqScanRadar)\("([^"]+)",\s*{(.*?)}\)', rwr, re.DOTALL)
          for name, body in create_entries:
              key = norm(name)
              radar_data.setdefault(key, {})
              if (m := re.search(r'band\s*=\s*([\d.]+)', body)):
                  radar_data[key]["band"] = float(m.group(1))
              if (v := extract_prf("prf_search", body)) is not None:
                  radar_data[key]["prf_search"] = v
              if (v := extract_prf("prf_track", body)) is not None:
                  radar_data[key]["prf_track"] = v
              if "has_cd_command_guidance" in body:
                  radar_data[key]["has_cd_command_guidance"] = True

          # Step 3.5: Override again BEFORE CreateRadarFromBase
          for name, body in override_entries:
              key = norm(name)
              radar_data.setdefault(key, {})
              if (m := re.search(r'band\s*=\s*([\d.]+)', body)):
                  radar_data[key]["band"] = float(m.group(1))
              if (v := extract_prf("prf_search", body)) is not None:
                  radar_data[key]["prf_search"] = v
              if (v := extract_prf("prf_track", body)) is not None:
                  radar_data[key]["prf_track"] = v
              if "has_cd_command_guidance" in body:
                  radar_data[key]["has_cd_command_guidance"] = True

          # Step 4: CreateRadarFromBase with full merging
          base_links = re.findall(r'CreateRadarFromBase\("([^"]+)",\s*"([^"]+)"\)', rwr)
          for new, base in base_links:
              new_key = norm(new)
              base_key = norm(base)
              if base_key in radar_data:
                  base_copy = radar_data[base_key].copy()
                  if new_key in radar_data:
                      base_copy.update(radar_data[new_key])
                  radar_data[new_key] = base_copy

          # Step 5: Final override after inheritance
          for name, body in override_entries:
              key = norm(name)
              radar_data.setdefault(key, {})
              if (m := re.search(r'band\s*=\s*([\d.]+)', body)):
                  radar_data[key]["band"] = float(m.group(1))
              if (v := extract_prf("prf_search", body)) is not None:
                  radar_data[key]["prf_search"] = v
              if (v := extract_prf("prf_track", body)) is not None:
                  radar_data[key]["prf_track"] = v
              if "has_cd_command_guidance" in body:
                  radar_data[key]["has_cd_command_guidance"] = True

          # Step 6: Generate final output
          limits = {}
          missing = []

          for wav in wav_list:
              base_name = Path(wav).stem
              radar_key = re.sub(r"_(SEARCH|TRACK)$", "", base_name)
              radar_key = norm(radar_key)
              radar = radar_data.get(radar_key)
              band = radar.get("band") if radar else None
              undetectable = band is None or band < BAND_MIN or band > BAND_MAX
              if band is None:
                  missing.append(radar_key)
              limits[wav] = {
                  "band": band,
                  "prf_search": radar.get("prf_search") if radar else None,
                  "prf_track": radar.get("prf_track") if radar else None,
                  "has_cd_command_guidance": radar.get("has_cd_command_guidance", False) if radar else False,
                  "undetectable": undetectable
              }

          if missing:
              print(f"⚠️ {len(set(missing))} radars not found in band data:")
              print(", ".join(sorted(set(missing))[:10]))

          Path("alr46_limits.json").write_text(json.dumps(limits, indent=2), encoding="utf-8")
          print("✅ alr46_limits.json generated.")
          EOF

      - name: Clean up source repo
        run: rm -rf source-repo

      - name: Commit and push changes
        run: |
          # Give a timestamped commit message
          COMMIT_MESSAGE="Auto-generate or update alr46_limits.json"
          COMMIT_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          FINAL_COMMIT_MSG="$COMMIT_MESSAGE (Synced on $COMMIT_TIMESTAMP)"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add alr46_limits.json

          if git diff --cached --quiet; then
            echo "⚠️ No changes detected, skipping commit."
          else
            git commit -m "$FINAL_COMMIT_MSG"
            git push
          fi
