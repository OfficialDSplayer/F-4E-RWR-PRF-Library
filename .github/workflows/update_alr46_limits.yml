name: Update ALR-46 Limits JSON

on:
  push:
    paths:
      - "imported_luas/rwr.lua"
      - "imported_luas/radars.lua"
      - "wav_list.json"
      - ".github/workflows/update_alr46_limits.yml"
  workflow_dispatch:

jobs:
  generate-alr46-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate or Update alr46_limits.json
        run: |
          python3 <<EOF
          import re, json
          from pathlib import Path

          BAND_MIN = 1.5  # Guess based on what's listed and tested
          BAND_MAX = 100.0  # Placeholder

          # Load files
          rwr = Path("imported_luas/rwr.lua").read_text(encoding="utf-8")
          radars = Path("imported_luas/radars.lua").read_text(encoding="utf-8")
          wav_list = json.loads(Path("wav_list.json").read_text(encoding="utf-8"))

          # Extract base radar band data from radars.lua
          radars_dict = dict(re.findall(r'\["([^"]+)"\]\s*=\s*{[^}]*band\s*=\s*([\d.]+)', radars))
          radars_dict = {k: float(v) for k, v in radars_dict.items()}

          # Override/add radar bands from rwr.lua
          rwr_dict = dict(re.findall(r'(?:CreateRadar|OverrideRadar)\("([^"]+)",\s*{[^}]*band\s*=\s*([\d.]+)', rwr))
          rwr_dict = {k: float(v) for k, v in rwr_dict.items()}

          # Merge: rwr overrides base
          combined = radars_dict.copy()
          combined.update(rwr_dict)

          # Normalize radar keys: use underscore versions
          band_lookup = {k.replace("/", "_"): v for k, v in combined.items()}

          # Create results
          limits = {}
          missing = []

          for wav in wav_list:
              filename = Path(wav).stem  # e.g. "SA-2_SEARCH"
              base_name = re.sub(r"_(SEARCH|TRACK)$", "", filename)

              band = band_lookup.get(base_name)
              if band is None:
                  missing.append(base_name)
                  undetectable = True
              else:
                  undetectable = band < BAND_MIN or band > BAND_MAX

              limits[wav] = {
                  "undetectable": undetectable
              }

          # Log missing
          if missing:
              print(f"⚠️ {len(missing)} radars not found in band data:")
              print(", ".join(sorted(set(missing))[:10]))

          # Write the final JSON
          Path("alr46_limits.json").write_text(json.dumps(limits, indent=2), encoding="utf-8")
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add alr46_limits.json

          if git diff --cached --quiet; then
            echo "⚠️ No changes detected, skipping commit."
          else
            git commit -m "Auto-generate or update alr46_limits.json"
            git push
          fi
