name: Update ALR-46 Threat Info JSON

on:
  push:
    paths:
      - "imported_luas/rwr.lua"
      - "imported_luas/radars.lua"
      - "jsons/wav_list.json"
      - ".github/workflows/update_alr46_threat_info.yml"
  workflow_dispatch:

jobs:
  generate-alr46-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Clone external source repo (DCS-Datamine-Raw-Files)
        run: |
          git clone --depth=1 https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/OfficialDSplayer/DCS-Datamine-Raw-Files.git source-repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Generate or update alr_46_threat_info.json
        run: |
          python3 <<EOF
          import re, json
          from pathlib import Path

          BAND_MIN = 2
          BAND_MAX = 20.0

          # Load source files
          rwr = Path("source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/rwr.lua").read_text(encoding="utf-8")
          radars = Path("source-repo/Mods/aircraft/F-4E/Cockpit/Scripts/RWR/radars.lua").read_text(encoding="utf-8")
          wav_list = json.loads(Path("jsons/wav_list.json").read_text(encoding="utf-8"))

          def norm(name):
              return name.replace("/", "_")

          # Step 1: Parse symbolic constants (e.g., CW_PRF = 20000)
          constants = dict(re.findall(r'(\w+)\s*=\s*([\d.]+)', rwr))

          def extract_prf(field, body):
              # Match things like: prf_search = 220000 or prf_track = CW_PRF
              pattern = rf'{field}\s*=\s*([0-9.]+|\w+)\s*,?'
              match = re.search(pattern, body)
              if match:
                  val = match.group(1)
                  print(f"üß™ Matched {field} = {val}")
                  if re.match(r'^[0-9.]+$', val):
                      return float(val)
                  if val in constants:
                      return float(constants[val])
                  print(f"‚ö†Ô∏è Unknown constant: {val}")
              else:
                  print(f"‚ùå No match for {field} in:\n{body}")
              return None


          # Step 2: Parse radars.lua definitions
          named = re.findall(r'([A-Za-z0-9_/-]+)\s*=\s*{[^}]*?DisplayName\s*=\s*"([^"]+)",(.*?)}', radars, re.DOTALL)
          indexed = re.findall(r'\["([^"]+)"\]\s*=\s*{[^}]*?DisplayName\s*=\s*"([^"]+)",(.*?)}', radars, re.DOTALL)

          radars_dict = {}
          for _, display, body in named + indexed:
              key = norm(display)
              entry = {}
              if (m := re.search(r'band\s*=\s*([0-9.]+)', body)):
                  entry["band"] = float(m.group(1))
              if (v := extract_prf("prf_search", body)) is not None:
                  entry["prf_search"] = v
              if (v := extract_prf("prf_track", body)) is not None:
                  entry["prf_track"] = v
              if "has_cd_command_guidance" in body:
                  entry["has_cd_command_guidance"] = True
              radars_dict[key] = entry

          radar_data = radars_dict.copy()

          # Step 2.5: Capture all override blocks up front
          def find_override_blocks(text):
              entries = []
              lines = text.splitlines()
              i = 0
              while i < len(lines):
                  if m := re.match(r'\s*OverrideRadar\("([^"]+)",\s*{', lines[i]):
                      name = m.group(1)
                      brace_count = 1
                      block_lines = [lines[i]]
                      i += 1
                      while i < len(lines) and brace_count > 0:
                          line = lines[i]
                          brace_count += line.count("{")
                          brace_count -= line.count("}")
                          block_lines.append(line)
                          i += 1
                      body = "\n".join(block_lines)
                      entries.append((name, body))
                  else:
                      i += 1
              return entries
          override_entries = find_override_blocks(rwr)


          # Apply overrides (first pass)
          def apply_override(name, body):
              key = norm(name)
              print(f"üìå Applying override to: {name} ‚Üí {key}")
              radar_data.setdefault(key, {})
              if (m := re.search(r'band\s*=\s*([0-9.]+)', body)):
                  radar_data[key]["band"] = float(m.group(1))
              if (v := extract_prf("prf_search", body)) is not None:
                  radar_data[key]["prf_search"] = v
              if (v := extract_prf("prf_track", body)) is not None:
                  radar_data[key]["prf_track"] = v
              if "has_cd_command_guidance" in body:
                  radar_data[key]["has_cd_command_guidance"] = True
              if key == "AN_APG-63":
                  print(f"üîç Overriding {key}: prf_search = {v}")

          for name, body in override_entries:
              apply_override(name, body)

          # Step 3: Parse CreateRadar and CreateFrqScanRadar using brace-depth
          def find_radar_blocks(text):
              entries = []
              lines = text.splitlines()
              i = 0
              while i < len(lines):
                  if m := re.match(r'\s*(CreateRadar|CreateFrqScanRadar)\("([^"]+)",\s*{', lines[i]):
                      name = m.group(2)
                      brace_count = 1
                      block_lines = [lines[i]]
                      i += 1
                      while i < len(lines) and brace_count > 0:
                          line = lines[i]
                          brace_count += line.count("{")
                          brace_count -= line.count("}")
                          block_lines.append(line)
                          i += 1
                      body = "\n".join(block_lines)
                      entries.append((name, body))
                  else:
                      i += 1
              return entries

          for name, body in find_radar_blocks(rwr):
              key = norm(name)
              radar_data.setdefault(key, {})
              if (m := re.search(r'band\s*=\s*([0-9.]+)', body)):
                  radar_data[key]["band"] = float(m.group(1))
              if (v := extract_prf("prf_search", body)) is not None:
                  radar_data[key]["prf_search"] = v
              if (v := extract_prf("prf_track", body)) is not None:
                  radar_data[key]["prf_track"] = v
              if "has_cd_command_guidance" in body:
                  radar_data[key]["has_cd_command_guidance"] = True

          # Step 3.5: Apply overrides again after CreateRadar
          for name, body in override_entries:
              apply_override(name, body)

          # Step 4: CreateRadarFromBase (inherit and merge)
          base_links = re.findall(r'CreateRadarFromBase\("([^"]+)",\s*"([^"]+)"\)', rwr)
          for new, base in base_links:
              new_key = norm(new)
              base_key = norm(base)
              if base_key in radar_data:
                  base_copy = radar_data[base_key].copy()
                  if new_key in radar_data:
                      base_copy.update(radar_data[new_key])
                  radar_data[new_key] = base_copy

          if new_key == "AN_APG-63":
              print(f"üîÅ After base copy {new_key}:", radar_data[new_key])


          # Step 5: Final override pass (ensures total dominance)
          for name, body in override_entries:
              apply_override(name, body)

          # Step 6: Map WAV files to radar info
          limits = {}
          missing = []

          for wav in wav_list:
              base_name = Path(wav).stem
              radar_key = re.sub(r"_(SEARCH|TRACK)$", "", base_name)
              radar_key = norm(radar_key)
              radar = radar_data.get(radar_key)
              band = radar.get("band") if radar else None
              undetectable = band is None or band < BAND_MIN or band > BAND_MAX
              if band is None:
                  missing.append(radar_key)
              limits[wav] = {
                  "band": band,
                  "prf_search": radar.get("prf_search") if radar else None,
                  "prf_track": radar.get("prf_track") if radar else None,
                  "has_cd_command_guidance": radar.get("has_cd_command_guidance", False) if radar else False,
                  "undetectable": undetectable
              }
          print("üì¶ Final AN_APG-63:", radar_data.get("AN_APG-63"))

          # Final write
          Path("jsons/alr46_threat_info.json").write_text(
              json.dumps(limits, indent=2, ensure_ascii=False, separators=(",", ": ")),
              encoding="utf-8"
          )

          if missing:
              print(f"‚ö†Ô∏è {len(set(missing))} radars not found:")
              print(", ".join(sorted(set(missing))[:10]))

          print("‚úÖ alr46_threat_info.json generated.")
          EOF

      - name: Clean up source repo
        run: rm -rf source-repo

      - name: Commit and push changes
        run: |
          # Give a timestamped commit message
          COMMIT_MESSAGE="Auto-generate or update alr46_threat_info.json"
          COMMIT_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          FINAL_COMMIT_MSG="$COMMIT_MESSAGE (Synced on $COMMIT_TIMESTAMP)"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add jsons/alr46_threat_info.json

          if git diff --cached --quiet; then
            echo "‚ö†Ô∏è No changes detected, skipping commit."
          else
            git commit -m "$FINAL_COMMIT_MSG"
            git push
          fi
